default:
  before_script:
    - docker info

stages:
  - docker build
  - docker push

Test build docker images for merge requests:
  stage: docker build
  tags:
    - dnome
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - docker build -t $CI_REGISTRY/frontend .
    - cd ../comms
    - docker build -t $CI_REGISTRY/backend .
 

Build latest docker images:
  stage: docker build
  tags:
    - dnome
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  before_script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - docker build -t $CI_REGISTRY/frontend .
    - cd ../comms
    - docker build -t $CI_REGISTRY/backend .


Push latest to registry:
  stage: docker push
  tags:
    - dnome
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  before_script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  script:
    - docker push $CI_REGISTRY/frontend
    - docker push $CI_REGISTRY/backend

Build stable docker images:
  stage: docker build
  tags:
    - dnome
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  before_script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - docker build -t $CI_REGISTRY/frontend:stable .
    - cd ../comms
    - docker build -t $CI_REGISTRY/backend:stable .


Push stable to registry:
  stage: docker push
  tags:
    - dnome
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  before_script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  script:
    - docker push $CI_REGISTRY/frontend:stable
    - docker push $CI_REGISTRY/backend:stable